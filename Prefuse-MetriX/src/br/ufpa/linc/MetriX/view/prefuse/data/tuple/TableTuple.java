package br.ufpa.linc.MetriX.view.prefuse.data.tuple;

import java.util.Date;

import br.ufpa.linc.MetriX.view.prefuse.data.Graph;
import br.ufpa.linc.MetriX.view.prefuse.data.Schema;
import br.ufpa.linc.MetriX.view.prefuse.data.Table;
import br.ufpa.linc.MetriX.view.prefuse.data.Tuple;


/**
 * Tuple implementation that pulls values from a backing data Table.
 * 
 * @author <a href="http://jheer.org">jeffrey heer</a>
 */
@SuppressWarnings("rawtypes")
public class TableTuple implements Tuple {

    protected Table m_table;
    protected int m_row;
    
    /**
     * Initialize a new TableTuple for the given table and row. Tuples are
     * automatically generated by {@link TupleManager} instances, and
     * so application code should never need to invoke this method.
     * @param table the data Table
     * @param graph ignored by this class
     * @param row the table row index
     */
    protected void init(Table table, Graph graph, int row) {
        m_table = table;
        m_row = m_table.isValidRow(row) ? row : -1;
    }
    
    /**
     * @see Tuple#getSchema()
     */
    public Schema getSchema() {
        return m_table.getSchema();
    }
    
    /**
     * @see Tuple#getTable()
     */
    public Table getTable() {
        return m_table;
    }
    
    /**
     * @see Tuple#getRow()
     */
    public int getRow() {
        return m_row;
    }
    
    // ------------------------------------------------------------------------
    // Index Checking
    
    /**
     * @see Tuple#isValid()
     */
    public boolean isValid() {
        return m_row != -1;
    }
    
    /**
     * Invalidates this tuple. Called by an enclosing table when a row 
     * is deleted.
     */
    void invalidate() {
        m_row = -1;
    }
    
    /**
     * Internal validity check. Throw an exception if the tuple is not valid.
     */
    private void validityCheck() {
        if ( m_row == -1 ) {
            throw new IllegalStateException("This tuple is no longer valid. " +
                "It has been deleted from its table");
        }
    }
    
    // ------------------------------------------------------------------------
    // Column Methods
    
    /**
     * @see Tuple#getColumnType(java.lang.String)
     */
    public Class getColumnType(String field) {
        return m_table.getColumnType(field);
    }
    
    /**
     * @see Tuple#getColumnType(int)
     */
    public Class getColumnType(int col) {
        return m_table.getColumnType(col);
    }

    /**
     * @see Tuple#getColumnIndex(java.lang.String)
     */
    public int getColumnIndex(String field) {
        return m_table.getColumnNumber(field);
    }
    
    /**
     * @see Tuple#getColumnCount()
     */
    public int getColumnCount() {
        return m_table.getColumnCount();
    }
    
    /**
     * @see Tuple#getColumnName(int)
     */
    public String getColumnName(int col) {
        return m_table.getColumnName(col);
    }
    
    // ------------------------------------------------------------------------
    // Data Access Methods
    
    /**
     * @see Tuple#canGet(java.lang.String, java.lang.Class)
     */
    public boolean canGet(String field, Class type) {
        return m_table.canGet(field, type);
    }
    
    /**
     * @see Tuple#canSet(java.lang.String, java.lang.Class)
     */
    public boolean canSet(String field, Class type) {
        return m_table.canSet(field, type);
    }
    
    /**
     * @see Tuple#get(java.lang.String)
     */
    public final Object get(String field) {
        validityCheck();
        return m_table.get(m_row, field);
    }
    
    /**
     * @see Tuple#set(java.lang.String, java.lang.Object)
     */
    public final void set(String field, Object value) {
        validityCheck();
        m_table.set(m_row, field, value);
    }
    
    /**
     * @see Tuple#get(int)
     */
    public final Object get(int idx) {
        validityCheck();
        return m_table.get(m_row, idx);
    }

    /**
     * @see Tuple#set(int, java.lang.Object)
     */
    public final void set(int idx, Object value) {
        validityCheck();
        m_table.set(m_row, idx, value);
    }
    
    /**
     * @see Tuple#getDefault(java.lang.String)
     */
    public Object getDefault(String field) {
        validityCheck();
        return m_table.getDefault(field);
    }
    
    /**
     * @see Tuple#revertToDefault(java.lang.String)
     */
    public void revertToDefault(String field) {
        validityCheck();
        m_table.revertToDefault(m_row, field);
    }
    
    // ------------------------------------------------------------------------
    // Convenience Data Access Methods
    
    /**
     * @see Tuple#canGetInt(java.lang.String)
     */
    public final boolean canGetInt(String field) {
        return m_table.canGetInt(field);
    }
    
    /**
     * @see Tuple#canSetInt(java.lang.String)
     */
    public final boolean canSetInt(String field) {
        return m_table.canSetInt(field);
    }
    
    /**
     * @see Tuple#getInt(java.lang.String)
     */
    public final int getInt(String field) {
        validityCheck();
        return m_table.getInt(m_row, field);
    }
    
    /**
     * @see Tuple#setInt(java.lang.String, int)
     */
    public final void setInt(String field, int val) {
        validityCheck();
        m_table.setInt(m_row, field, val);
    }
    
    /**
     * @see Tuple#getInt(int)
     */
    public final int getInt(int col) {
        validityCheck();
        return m_table.getInt(m_row, col);
    }
    
    /**
     * @see Tuple#setInt(int, int)
     */
    public final void setInt(int col, int val) {
        validityCheck();
        m_table.setInt(m_row, col, val);
    }
    
    // --------------------------------------------------------------
    
    /**
     * @see Tuple#canGetLong(java.lang.String)
     */
    public final boolean canGetLong(String field) {
        return m_table.canGetLong(field);
    }
    
    /**
     * @see Tuple#canSetLong(java.lang.String)
     */
    public final boolean canSetLong(String field) {
        return m_table.canSetLong(field);
    }
    
    /**
     * @see Tuple#getLong(java.lang.String)
     */
    public final long getLong(String field) {
        validityCheck();
        return m_table.getLong(m_row, field);
    }
    
    /**
     * @see Tuple#setLong(java.lang.String, long)
     */
    public final void setLong(String field, long val) {
        validityCheck();
        m_table.setLong(m_row, field, val);
    }
    
    /**
     * @see Tuple#getLong(int)
     */
    public final long getLong(int col) {
        validityCheck();
        return m_table.getLong(m_row, col);
    }
    
    /**
     * @see Tuple#setLong(int, long)
     */
    public final void setLong(int col, long val) {
        validityCheck();
        m_table.setLong(m_row, col, val);
    }

    // --------------------------------------------------------------
    
    /**
     * @see Tuple#canGetFloat(java.lang.String)
     */
    public final boolean canGetFloat(String field) {
        return m_table.canGetFloat(field);
    }
    
    /**
     * @see Tuple#canSetFloat(java.lang.String)
     */
    public final boolean canSetFloat(String field) {
        return m_table.canSetFloat(field);
    }
    
    /**
     * @see Tuple#getFloat(java.lang.String)
     */
    public final float getFloat(String field) {
        validityCheck();
        return m_table.getFloat(m_row, field);
    }
    
    /**
     * @see Tuple#setFloat(java.lang.String, float)
     */
    public final void setFloat(String field, float val) {
        validityCheck();
        m_table.setFloat(m_row, field, val);
    }
    
    /**
     * @see Tuple#getFloat(int)
     */
    public final float getFloat(int col) {
        validityCheck();
        return m_table.getFloat(m_row, col);
    }
    
    /**
     * @see Tuple#setFloat(int, float)
     */
    public final void setFloat(int col, float val) {
        validityCheck();
        m_table.setFloat(m_row, col, val);
    }
    
    // --------------------------------------------------------------
    
    /**
     * @see Tuple#canGetDouble(java.lang.String)
     */
    public final boolean canGetDouble(String field) {
        return m_table.canGetDouble(field);
    }
    
    /**
     * @see Tuple#canSetDouble(java.lang.String)
     */
    public final boolean canSetDouble(String field) {
        return m_table.canSetDouble(field);
    }
    
    /**
     * @see Tuple#getDouble(java.lang.String)
     */
    public final double getDouble(String field) {
        validityCheck();
        return m_table.getDouble(m_row, field);
    }
    
    /**
     * @see Tuple#setDouble(java.lang.String, double)
     */
    public final void setDouble(String field, double val) {
        validityCheck();
        m_table.setDouble(m_row, field, val);
    }
    
    /**
     * @see Tuple#getDouble(int)
     */
    public final double getDouble(int col) {
        validityCheck();
        return m_table.getDouble(m_row, col);
    }
    
    /**
     * @see Tuple#setDouble(int, double)
     */
    public final void setDouble(int col, double val) {
        validityCheck();
        m_table.setDouble(m_row, col, val);
    }
    
    // --------------------------------------------------------------
    
    /**
     * @see Tuple#canGetBoolean(java.lang.String)
     */
    public final boolean canGetBoolean(String field) {
        return m_table.canGetBoolean(field);
    }
    
    /**
     * @see Tuple#canSetBoolean(java.lang.String)
     */
    public final boolean canSetBoolean(String field) {
        return m_table.canSetBoolean(field);
    }
    
    /**
     * @see Tuple#getBoolean(java.lang.String)
     */
    public final boolean getBoolean(String field) {
        validityCheck();
        return m_table.getBoolean(m_row, field);
    }
    
    /**
     * @see Tuple#setBoolean(java.lang.String, boolean)
     */
    public final void setBoolean(String field, boolean val) {
        validityCheck();
        m_table.setBoolean(m_row, field, val);
    }
    
    /**
     * @see Tuple#getBoolean(int)
     */
    public final boolean getBoolean(int col) {
        validityCheck();
        return m_table.getBoolean(m_row, col);
    }
    
    /**
     * @see Tuple#setBoolean(java.lang.String, boolean)
     */
    public final void setBoolean(int col, boolean val) {
        validityCheck();
        m_table.setBoolean(m_row, col, val);
    }
    
    // --------------------------------------------------------------
    
    /**
     * @see Tuple#canGetString(java.lang.String)
     */
    public final boolean canGetString(String field) {
        return m_table.canGetString(field);
    }
    
    /**
     * @see Tuple#canSetString(java.lang.String)
     */
    public final boolean canSetString(String field) {
        return m_table.canSetString(field);
    }
    
    /**
     * @see Tuple#getString(java.lang.String)
     */
    public final String getString(String field) {
        validityCheck();
        return m_table.getString(m_row, field);
    }
    
    /**
     * @see Tuple#setString(java.lang.String, java.lang.String)
     */
    public final void setString(String field, String val) {
        validityCheck();
        m_table.setString(m_row, field, val);
    }
    
    /**
     * @see Tuple#getString(int)
     */
    public final String getString(int col) {
        validityCheck();
        return m_table.getString(m_row, col);
    }
    
    /**
     * @see Tuple#setString(int, java.lang.String)
     */
    public final void setString(int col, String val) {
        validityCheck();
        m_table.setString(m_row, col, val);
    }
    
    // --------------------------------------------------------------
    
    /**
     * @see Tuple#canGetDate(java.lang.String)
     */
    public final boolean canGetDate(String field) {
        return m_table.canGetDate(field);
    }
    
    /**
     * @see Tuple#canSetDate(java.lang.String)
     */
    public final boolean canSetDate(String field) {
        return m_table.canSetDate(field);
    }
    
    /**
     * @see Tuple#getDate(java.lang.String)
     */
    public final Date getDate(String field) {
        validityCheck();
        return m_table.getDate(m_row, field);
    }
    
    /**
     * @see Tuple#setDate(java.lang.String, java.util.Date)
     */
    public final void setDate(String field, Date val) {
        validityCheck();
        m_table.setDate(m_row, field, val);
    }
    
    /**
     * @see Tuple#getDate(int)
     */
    public final Date getDate(int col) {
        validityCheck();
        return m_table.getDate(m_row, col);
    }
    
    /**
     * @see Tuple#setDate(java.lang.String, java.util.Date)
     */
    public final void setDate(int col, Date val) {
        validityCheck();
        m_table.setDate(m_row, col, val);
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @see java.lang.Object#toString()
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("Tuple[");
        for ( int i=0; i<getColumnCount(); ++i ) {
            if ( i > 0 ) sb.append(',');
            try {
                sb.append(get(i).toString());
            } catch ( Exception e ) {
                sb.append("?");
            }
        }
        sb.append("]");
        return sb.toString();
    }
    
} // end of class TableTuple
